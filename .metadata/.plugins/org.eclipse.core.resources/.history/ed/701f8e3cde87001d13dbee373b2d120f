package com.ezen.spring.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.spring.dao.UserDAO;
import com.ezen.spring.domain.BoardDTO;
import com.ezen.spring.domain.BoardVO;
import com.ezen.spring.domain.FileVO;
import com.ezen.spring.domain.PagingVO;
import com.ezen.spring.domain.UserVO;
import com.ezen.spring.handler.FileHandler;
import com.ezen.spring.handler.PagingHandler;
import com.ezen.spring.service.BoardService;
import com.ezen.spring.service.UserService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class BoardController {
	
	@Inject
	private BoardService boardService;
	@Inject
	private UserDAO userDao;
	@Inject
	private UserService userService;
	@Inject
	private FileHandler fileHandler;
	
	
	@GetMapping("/posting")
	public String postingGet() {
		return "/board/posting";
	}
	
	@PostMapping("/posting")
	public String posting(BoardVO bvo, RedirectAttributes reAttr, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(bvo.toString());
		log.info("files posting >>>"+files.toString());
		List<FileVO> fList = null;
		if(files[0].getSize()>0) {
			fList = fileHandler.uploadFiles(files);
		}else {
			log.info("file null");
		}
		int isOk = boardService.posting(new BoardDTO(bvo, fList));
//		int isOk = boardService.posting(bvo);
		reAttr.addFlashAttribute("isOk", isOk>0?"1":"0");
		log.info("board posting >>> " +(isOk>0?"P":"F"));
		return "redirect:/list";
	}
	
	@GetMapping("/list")
	public String list(Model model, PagingVO pgvo) {
		log.info("paging >>> "+pgvo.getPageNo());
		List<BoardVO> list = boardService.list(pgvo);
		int totalCount = boardService.getListCount();
		PagingHandler pgh = new PagingHandler(pgvo, totalCount);
		model.addAttribute("list", list);
		model.addAttribute("pgh", pgh);
		return "/board/list";
	}
	
	@GetMapping("/detail")
	public String detail(Model model, @RequestParam("bno")int bno) {
		int isOk = boardService.updateReadCount(bno);
		log.info("readCount >>> "+(isOk>0?"P":"F"));
		
		BoardDTO boardDTO = boardService.getDetail(bno);
		log.info("bvo >>> "+boardDTO.getBvo().toString());
//		log.info("fList >>> "+boardDTO.getFList().get(0).toString());
//		BoardVO bvo = boardService.detail(bno);
		model.addAttribute("bvo", boardDTO.getBvo());
		model.addAttribute("fList", boardDTO.getFList());
		return "/board/detail";
	}
	
	@GetMapping("/modify")
	public String modifyGet(Model model, @RequestParam("bno")int bno) {
//		BoardVO bvo = boardService.modifyGet(bno);
		BoardDTO boardDTO = boardService.getModify(bno);
		log.info("bvo >>> "+boardDTO.getBvo().toString());
//		log.info("fList >>> "+boardDTO.getFList().get(0).toString());
		model.addAttribute("bvo", boardDTO.getBvo());
		model.addAttribute("fList", boardDTO.getFList());
		return "/board/modify";
	}
	
	@PostMapping("/modify")
	public String modify(RedirectAttributes reAttr, BoardVO bvo, @RequestParam(name="files", required=false)MultipartFile[] files) {
		log.info("modify >>> "+bvo.toString());
		UserVO user = userDao.getUser(bvo.getWriter());
//		int isUp = boardService.modify(bvo, user);
		List<FileVO> fList = null;
		if(files[0].getSize()>0) {
			fList = fileHandler.uploadFiles(files);
		}else {
			log.info("file null");
		}
		int isUp = boardService.modify(new BoardDTO(bvo, fList), user);
		log.info("modify >>> "+(isUp>0?"P":"F"));
		reAttr.addFlashAttribute(isUp>0?"1":"0");
		return "redirect:/list";
	}
	
	@GetMapping("/delete")
	public String delete(RedirectAttributes reAttr, @RequestParam("bno")int bno, HttpServletRequest request) {
		HttpSession ses = request.getSession();
		UserVO user = (UserVO)ses.getAttribute("ses");
		log.info(user.toString());
		user = userService.getUser(request);
		int isUp = boardService.delete(bno, user);
		log.info("delete >>> "+(isUp>0?"P":"F"));
		return "redirect:/list";
	}
	
	@DeleteMapping(value="/file/{uuid}", produces = {MediaType.TEXT_PLAIN_VALUE})
	public ResponseEntity<String> imgDelete(@PathVariable("uuid")String uuid){
		log.info("file delete >>> "+uuid);
		
		return new ResponseEntity<String>("1", HttpStatus.OK);
		
//		int isOk = boardService.delete(uuid);
//		return isOk>0? new ResponseEntity<String>("1", HttpStatus.OK)
//				: new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
